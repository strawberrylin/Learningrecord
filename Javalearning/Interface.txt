Java学习笔记------------##Interface&&abstract class 学习
###--abstract  
	可用来修饰抽象方法方法和抽象类  有抽象方法的类一定是抽象类，但抽象类不一定有抽象方法
	抽象类不能被实例化，无法通过new来调用构造器来创建一个实例。
	抽象类的构造器主要被子类调用
	以下三种情况要定义抽象方法：
	1、类内部有抽象方法
	2、继承一个抽象父类，但没有实现父类的所有方法
	3、实现了一个接口，但没有实现所有的抽象方法
	抽象类中定义了方法，但没有方法体，有继承的子类实现，这样细节是载子类中，父类并不知道。
##--Interface
	依靠抽象类实现。是抽象出来的模板，定义了某一批类所需哟遵守的规范。
	接口的特点在于将实现和规范分离，让系统的各个组件向接口组合。接口并不关心子类要实现什么，怎么实现。
接口关键字：Interface 接口名 父接口...
接口类的内部的变量只能是常量，并且被public static final修饰
接口类里的方法只能被publi abstract 修饰
#demo--Output接口定义
package cn.strawberry;

/*
 * Created by asusss on 2016/4/20.
 */

public interface Output{
    //接口定义的成员变量只能是常量
    int MAX_CACHE_LINE=100;
    //接口定义的普通方法只能是public abstract修饰
    public abstract void out();
    public abstract void getData(String msg);
    //在接口中定义默认方法
    default void print(String... msgs){
        for(String msg : msgs){
            System.out.println(msg);
        }
    }
    default void test(){
        System.out.println("default function");
    }
    static String staticTest(){
        return "function in class";
    }
}
#--接口调用
package cn.lin;

import cn.strawberry.Output;

/*
 * Created by asusss on 2016/4/20.
 */
public class Test {
    public static void main(String[] args) {
        //访问另一个包中的Output接口中的常量
        System.out.println(Output.MAX_CACHE_LINE);
        System.out.println(cn.strawberry.Output.staticTest());
    }
}
 

